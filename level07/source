// This file is so long that in many cases we didn't bother prettifying
// things that we didn't need to understand what was happening.

int get_unum(void)
{
  int buffer [3];

  buffer[0] = 0;
  fflush(stdout);
  scanf(&DAT_08048ad0, buffer);
  clear_stdin();
  return buffer[0];
}

int read_number(int storage_offset)
{
  int iVar1;

  printf(" Index: ");
  iVar1 = get_unum();
  printf(" Number at data[%u] is %u\n",iVar1,*(int *)(iVar1 * 4 + storage_offset));
  return 0;
}


int store_number(int storage_offset)

{
  uint user_value;
  uint user_index;

  printf(" Number: ");
  user_value = get_unum();
  printf(" Index: ");
  user_index = get_unum();
  if ((user_index % 3 == 0) || (user_value >> 0x18 == 0xb7)) {
    puts(" *** ERROR! ***");
    puts("   This index is reserved for wil!");
    puts(" *** ERROR! ***");
    return 1;
  } else {
    *(uint *)(user_index * 4 + storage_offset) = user_value;
    return 0;
  }
}



STORAGE_SIZE = 100
int main(int argc, char *argv[], char *envp[])
{
  char cVar1;
  int iVar2;
  uint uVar3;
  undefined4 *temp_char;
  char *pcVar5;
  byte *pbVar6;
  int in_GS_OFFSET;
  bool bVar7;
  bool bVar8;
  bool bVar9;
  byte bVar10;
  char **local_1c8;
  char **local_1c4;
  undefined4 storage [STORAGE_SIZE];
  undefined4 local_2c;
  undefined4 command_buffer;
  int local_14;

  bVar10 = 0;
  local_1c4 = param_2;
  local_1c8 = param_3;
  local_14 = *(int *)(in_GS_OFFSET + 0x14);
  local_2c = 0;
  command_buffer = 0;
  temp_char = storage;
  // set storage to 0
  for (iVar2 = STORAGE_SIZE; iVar2 != 0; iVar2 = iVar2 + -1) {
    *temp_char = 0;
    temp_char = temp_char + 1;
  }
  for (; *local_1c4 != (char *)0x0; local_1c4 = local_1c4 + 1) {
    uVar3 = 0xffffffff;
    pcVar5 = *local_1c4;
    do {
      if (uVar3 == 0) break;
      uVar3 = uVar3 - 1;
      cVar1 = *pcVar5;
      pcVar5 = pcVar5 + (uint)bVar10 * -2 + 1;
    } while (cVar1 != '\0');
    memset(*local_1c4,0,~uVar3 - 1);
  }
  for (; *local_1c8 != (char *)0x0; local_1c8 = local_1c8 + 1) {
    uVar3 = 0xffffffff;
    pcVar5 = *local_1c8;
    do {
      if (uVar3 == 0) break;
      uVar3 = uVar3 - 1;
      cVar1 = *pcVar5;
      pcVar5 = pcVar5 + (uint)bVar10 * -2 + 1;
    } while (cVar1 != '\0');
    memset(*local_1c8,0,~uVar3 - 1);
  }
  puts("----------------------------------------------------\n");
  puts("Welcome to wil\'s crappy number stora ge service!   \n");
  puts("----------------------------------------------------\n");
  puts("Commands:                                           \n");
  puts("    store - store a number into the data storage    \n");
  puts("    read   - read a number from the data storage    \n");
  puts("    quit  - exit the program                        \n");
  puts("----------------------------------------------------\n");
  puts("    wil has reserved some storage :>                \n");
  puts("----------------------------------------------------\n");

  while (true) {
    printf("Input command: ");
    local_2c = 1;
    fgets(command_buffer, 0x14 aka 20, stdin);
    uVar3 = 0xffffffff;
    temp_char = &command_buffer;
    do {
      if (uVar3 == 0) break;
      uVar3 = uVar3 - 1;
      cVar1 = *(char *)temp_char;
      temp_char = (undefined4 *)((int)temp_char + (uint)bVar10 * -2 + 1);
    } while (cVar1 != '\0');
    uVar3 = ~uVar3;
    bVar7 = uVar3 == 1;
    bVar9 = uVar3 == 2;
    *(undefined *)((int)&local_2c + uVar3 + 2) = 0;
    iVar2 = 5;
    temp_char = &command_buffer;
    pbVar6 = (byte *)"store";
    do {
      if (iVar2 == 0) break;
      iVar2 = iVar2 + -1;
      bVar7 = *(byte *)temp_char < *pbVar6;
      bVar9 = *(byte *)temp_char == *pbVar6;
      temp_char = (undefined4 *)((int)temp_char + (uint)bVar10 * -2 + 1);
      pbVar6 = pbVar6 + (uint)bVar10 * -2 + 1;
    } while (bVar9);
    bVar8 = false;
    bVar7 = (!bVar7 && !bVar9) == bVar7;
    if (bVar7) {
      local_2c = store_number(storage);
    }
    else {
      iVar2 = 4;
      temp_char = &command_buffer;
      pbVar6 = &DAT_08048d61;
      do {
        if (iVar2 == 0) break;
        iVar2 = iVar2 + -1;
        bVar8 = *(byte *)temp_char < *pbVar6;
        bVar7 = *(byte *)temp_char == *pbVar6;
        temp_char = (undefined4 *)((int)temp_char + (uint)bVar10 * -2 + 1);
        pbVar6 = pbVar6 + (uint)bVar10 * -2 + 1;
      } while (bVar7);
      bVar9 = false;
      bVar7 = (!bVar8 && !bVar7) == bVar8;
      if (bVar7) {
        local_2c = read_number(storage);
      }
      else {
        iVar2 = 4;
        temp_char = &command_buffer;
        pbVar6 = &DAT_08048d66;
        do {
          if (iVar2 == 0) break;
          iVar2 = iVar2 + -1;
          bVar9 = *(byte *)temp_char < *pbVar6;
          bVar7 = *(byte *)temp_char == *pbVar6;
          temp_char = (undefined4 *)((int)temp_char + (uint)bVar10 * -2 + 1);
          pbVar6 = pbVar6 + (uint)bVar10 * -2 + 1;
        } while (bVar7);
        if ((!bVar9 && !bVar7) == bVar9) {
          if (local_14 == *(int *)(in_GS_OFFSET + 0x14)) {
            return 0;
          }
                    /* WARNING: Subroutine does not return */
          __stack_chk_fail();
        }
      }
    }
    if (local_2c == 0) {
      printf(" Completed %s command successfully\n",&command_buffer);
    }
    else {
      printf(" Failed to do %s command\n",&command_buffer);
    }
    command_buffer = 0;
  };
}
